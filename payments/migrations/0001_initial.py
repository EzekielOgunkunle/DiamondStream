# Generated by Django 5.2.4 on 2025-07-19 06:10

import django.db.models.deletion
import uuid
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('investments', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='PaymentDispute',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('dispute_type', models.CharField(choices=[('payment_not_received', 'Payment Not Received'), ('incorrect_amount', 'Incorrect Amount'), ('duplicate_payment', 'Duplicate Payment'), ('unauthorized_payment', 'Unauthorized Payment'), ('technical_issue', 'Technical Issue'), ('other', 'Other')], max_length=30)),
                ('description', models.TextField()),
                ('status', models.CharField(choices=[('open', 'Open'), ('investigating', 'Under Investigation'), ('resolved', 'Resolved'), ('closed', 'Closed')], default='open', max_length=20)),
                ('resolution_notes', models.TextField(blank=True)),
                ('evidence_files', models.JSONField(default=list, help_text='List of file paths for evidence documents')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('resolved_at', models.DateTimeField(blank=True, null=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Payment Dispute',
                'verbose_name_plural': 'Payment Disputes',
                'db_table': 'payment_disputes',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='PayoutRequest',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('amount', models.DecimalField(decimal_places=8, max_digits=15)),
                ('currency', models.CharField(choices=[('BTC', 'Bitcoin'), ('ETH', 'Ethereum'), ('DOGE', 'Dogecoin')], max_length=10)),
                ('payout_address', models.CharField(max_length=255)),
                ('status', models.CharField(choices=[('pending', 'Pending Review'), ('approved', 'Approved'), ('processing', 'Processing'), ('completed', 'Completed'), ('failed', 'Failed'), ('cancelled', 'Cancelled')], default='pending', max_length=20)),
                ('transaction_hash', models.CharField(blank=True, max_length=255)),
                ('transaction_fee', models.DecimalField(blank=True, decimal_places=8, max_digits=15, null=True)),
                ('net_amount', models.DecimalField(blank=True, decimal_places=8, max_digits=15, null=True)),
                ('admin_notes', models.TextField(blank=True)),
                ('failure_reason', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('processed_at', models.DateTimeField(blank=True, null=True)),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
            ],
            options={
                'verbose_name': 'Payout Request',
                'verbose_name_plural': 'Payout Requests',
                'db_table': 'payout_requests',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='PlatformWallet',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('currency', models.CharField(choices=[('BTC', 'Bitcoin'), ('ETH', 'Ethereum'), ('DOGE', 'Dogecoin')], max_length=10)),
                ('address', models.CharField(max_length=255, unique=True)),
                ('label', models.CharField(help_text='Admin label for wallet identification', max_length=100)),
                ('is_active', models.BooleanField(default=True)),
                ('is_primary', models.BooleanField(default=False)),
                ('balance', models.DecimalField(decimal_places=8, default=0, max_digits=15)),
                ('last_balance_update', models.DateTimeField(blank=True, null=True)),
                ('daily_limit', models.DecimalField(blank=True, decimal_places=8, help_text='Daily receiving limit for this wallet', max_digits=15, null=True)),
                ('total_received', models.DecimalField(decimal_places=8, default=0, max_digits=15)),
                ('transaction_count', models.PositiveIntegerField(default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Platform Wallet',
                'verbose_name_plural': 'Platform Wallets',
                'db_table': 'platform_wallets',
            },
        ),
        migrations.CreateModel(
            name='TransactionFee',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('currency', models.CharField(max_length=10)),
                ('operation', models.CharField(choices=[('payment', 'Payment Processing'), ('payout', 'Payout Processing'), ('transfer', 'Internal Transfer')], max_length=20)),
                ('base_fee', models.DecimalField(decimal_places=8, default=0, max_digits=15)),
                ('per_byte_fee', models.DecimalField(decimal_places=8, default=0, max_digits=15)),
                ('percentage_fee', models.DecimalField(decimal_places=4, default=0, max_digits=5)),
                ('network_congestion', models.CharField(choices=[('low', 'Low'), ('medium', 'Medium'), ('high', 'High')], default='medium', max_length=20)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Transaction Fee',
                'verbose_name_plural': 'Transaction Fees',
                'db_table': 'transaction_fees',
            },
        ),
        migrations.CreateModel(
            name='CryptoPayment',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('currency', models.CharField(choices=[('BTC', 'Bitcoin'), ('ETH', 'Ethereum'), ('DOGE', 'Dogecoin')], max_length=10)),
                ('amount', models.DecimalField(decimal_places=8, max_digits=15)),
                ('transaction_hash', models.CharField(blank=True, db_index=True, max_length=255)),
                ('from_address', models.CharField(blank=True, max_length=255)),
                ('to_address', models.CharField(max_length=255)),
                ('status', models.CharField(choices=[('pending', 'Pending Verification'), ('submitted', 'Payment Submitted'), ('confirming', 'Confirming on Blockchain'), ('confirmed', 'Confirmed'), ('failed', 'Failed'), ('cancelled', 'Cancelled'), ('disputed', 'Disputed')], default='pending', max_length=20)),
                ('confirmations', models.PositiveIntegerField(default=0)),
                ('required_confirmations', models.PositiveIntegerField(default=3)),
                ('block_number', models.PositiveIntegerField(blank=True, null=True)),
                ('block_hash', models.CharField(blank=True, max_length=255)),
                ('gas_used', models.DecimalField(blank=True, decimal_places=8, max_digits=15, null=True)),
                ('gas_price', models.DecimalField(blank=True, decimal_places=8, max_digits=15, null=True)),
                ('verified_at', models.DateTimeField(blank=True, null=True)),
                ('admin_notes', models.TextField(blank=True)),
                ('payment_proof', models.FileField(blank=True, help_text='Screenshot or proof of payment uploaded by user', null=True, upload_to='payment_proofs/')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('submitted_at', models.DateTimeField(blank=True, null=True)),
                ('confirmed_at', models.DateTimeField(blank=True, null=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('investment', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='payment', to='investments.investment')),
            ],
            options={
                'verbose_name': 'Crypto Payment',
                'verbose_name_plural': 'Crypto Payments',
                'db_table': 'crypto_payments',
                'ordering': ['-created_at'],
            },
        ),
    ]
